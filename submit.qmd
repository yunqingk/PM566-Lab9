---
title: "Lab 9"
author: "Karisa Ke"
format: html
editor: visual
---

## **Problem 1: Vectorization**

1.  This function generates an `n x k` dataset with all its entries drawn from a Poission distribution with mean `lambda`.

```{r}
fun1 <- function(n = 100, k = 4, lambda = 4) {
  x <- NULL
  
  for (i in 1:n){
    x <- rbind(x, rpois(k, lambda))    
  }
  
  return(x)
}

fun1alt <- function(n = 100, k = 4, lambda = 4) {
  matrix(rpois(n * k, lambda), ncol = k)
}
```

```{r}
# Check if both functions produce the same output
set.seed(123)
output1 <- fun1()
set.seed(123)
output2 <- fun1alt()
identical(output1, output2)
```

```{r}
library(microbenchmark)
microbenchmark(
  fun1(),
  fun1alt()
)
```

2.  This function finds the maximum value of each column of a matrix (hint: check out the `max.col()` function).

    ```{r}
    # Data Generating Process (10 x 10,000 matrix)
    set.seed(1234)
    x <- matrix(rnorm(1e4), nrow=10)

    # Find each column's max value
    fun2 <- function(x) {
      apply(x, 2, max)
    }

    fun2alt <- function(x) {
      max.col(x)
    }
    ```

```{r}
# Check if both functions produce the same output
set.seed(1234)
x <- matrix(rnorm(1e4), nrow = 10)
identical(fun2(x), fun2alt(x))

# Benchmark the two functions
microbenchmark(
  fun2(x),
  fun2alt(x)
)
```

## **Problem 3: Parallelization**

```{r}
library(parallel)

my_boot <- function(dat, stat, R, ncpus = 1L) {
  
  # Getting the random indices
  n <- nrow(dat)
  idx <- matrix(sample.int(n, n*R, TRUE), nrow=n, ncol=R)
  
  # THIS FUNCTION NEEDS TO BE PARALELLIZED
  # EDIT THIS CODE:
  cluster <- makeCluster(ncpus)
  
  ans <- mclapply(seq_len(R), function(i) {
    stat(dat[idx[, i], , drop = FALSE])
  }, mc.cores = ncpus)
  stopCluster(cluster)
  
  # Converting the list into a matrix
  ans <- do.call(rbind, ans)

  return(ans)
}
```

```{r}
# Bootstrap of an OLS
my_stat <- function(d) coef(lm(y ~ x, data=d))

# DATA SIM
set.seed(1)
n <- 500; R <- 1e4

x <- cbind(rnorm(n)); y <- x*5 + rnorm(n)

# Checking if we get something similar as lm
ans0 <- confint(lm(y~x))
ans1 <- my_boot(dat = data.frame(x, y), my_stat, R = R, ncpus = 2L)

# You should get something like this
t(apply(ans1, 2, quantile, c(.025,.975)))

ans0
```

```{r}
system.time(my_boot(dat = data.frame(x, y), my_stat, R = 4000, ncpus = 1L))
system.time(my_boot(dat = data.frame(x, y), my_stat, R = 4000, ncpus = 2L))
```
